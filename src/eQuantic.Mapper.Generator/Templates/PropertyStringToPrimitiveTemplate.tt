<#@ template language="C#" visibility="internal" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Microsoft.CodeAnalysis" #>
<#
    var destTypeName = destProperty.Type.Name;
    var isNullable = false;

    if (destTypeName == nameof(Nullable) &&
        destProperty.Type is INamedTypeSymbol { TypeArguments.Length: > 0 } destType)
    {
        destTypeName = destType.TypeArguments.First().Name;
        isNullable = true;
    }
    
    switch (destTypeName)
    {
        case nameof(DateTime):
            if (isNullable)
            {
#>
            destination.<#= destProperty.Name #> = !string.IsNullOrEmpty(source.<#= srcProperty.Name #>) ? DateTime.Parse(source.<#= srcProperty.Name #>) : null;
<#
            }
            else
            {
#>
            destination.<#= destProperty.Name #> = DateTime.Parse(source.<#= srcProperty.Name #>);
<#
            }
            break;
        default:
            if (isNullable)
            {
#>
            destination.<#= destProperty.Name #> = !string.IsNullOrEmpty(source.<#= srcProperty.Name #>) ? Convert.To<#= destTypeName #>(source.<#= srcProperty.Name #>) : null;
<#
            }
            else
            {
#>
            destination.<#= destProperty.Name #> = Convert.To<#= destTypeName #>(source.<#= srcProperty.Name #>);
<#
            }
            break;
    }
#>