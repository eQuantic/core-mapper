<#@ template language="C#" visibility="internal" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="eQuantic.Mapper.Generator.Extensions" #>
<#
    var asyncPrefix = asynchronous ? "Async" : "";
    var className = $"{asyncPrefix}{mapperInfo.MapperClass.Name}";
    var srcClassName = mapperInfo.SourceClass.Name;
    var srcProperties = GetProperties(mapperInfo.SourceClass);
    var destClassName = mapperInfo.DestinationClass.Name;
    var destProperties = GetProperties(mapperInfo.DestinationClass);
    var interfaceName = $"I{asyncPrefix}Mapper<{srcClassName}, {destClassName}>";
    var returnTypeName = asynchronous ? $"Task<{destClassName}?>" : $"{destClassName}?";
    var namespaces = GetNamespaces();
#>
//This file was generated by eQuantic.Mapper.Generator
<#
    foreach (var ns in namespaces)
    {
#>
using <#= ns #>;
<#
    }
#>

namespace <#= mapperInfo.MapperClass.FullNamespace()! #>
{
    public partial class <#= className #> : <#= interfaceName #>
    {
        /// <summary>
		/// The mapper factory
		/// </summary>
        private readonly IMapperFactory _mapperFactory;

        public <#= className #>(IMapperFactory mapperFactory)
		{
			_mapperFactory = mapperFactory;
		}

		#nullable enable
		public <#= returnTypeName #> Map<#= asyncPrefix #>(<#= srcClassName #>? source)
		{
			return Map<#= asyncPrefix #>(source, new <#= destClassName #>());
		}
		#nullable disable

		#nullable enable
		public <#= asynchronous ? "async ": "" #><#= returnTypeName #> Map<#= asyncPrefix #>(<#= srcClassName #>? source, <#= destClassName #>? destination)
		{
			if (source == null)
			{
				return null;
			}

			if (destination == null)
			{
				return <#= asynchronous ? "await ": "" #>Map<#= asyncPrefix #>(source);
			}
<#
    if (asynchronous)
    {
#>
			Task? beforeTask = null;
			BeforeMap(ref beforeTask, source, destination);
			await (beforeTask ?? Task.CompletedTask);
<#
    }
    else
    {
#>
			BeforeMap(source, destination);
<#
    }
#>

<#
    foreach (var destProperty in destProperties)
    {
#>
<#= WritePropertySet(srcProperties, destProperty) #><#
    }

    if (asynchronous)
    {
#>

			Task? afterTask = null;
			AfterMap(ref afterTask, source, destination);
			await (afterTask ?? Task.CompletedTask);
<#
    }
    else
    {
#>

			AfterMap(source, destination);
<#
    }
#>

			return destination;
		}
		#nullable disable

		#nullable enable
		partial void BeforeMap(<#= asynchronous ? "ref Task? beforeTask, " : "" #><#= srcClassName #>? source, <#= destClassName #>? destination);
		#nullable disable

		#nullable enable
		partial void AfterMap(<#= asynchronous ? "ref Task? afterTask, " : "" #><#= srcClassName #>? source, <#= destClassName #>? destination);
		#nullable disable
    }
}